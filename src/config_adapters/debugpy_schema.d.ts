/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

import { DebugConfiguration } from "vscode";

export type LocalSourceRoot = string;
export type RemoteSourceRoot = string;
export type PathMappings = PathMapping[];

export interface DebugpyLaunchConfiguration extends DebugConfiguration {
  /**
   * Command line arguments passed to the program. For string type arguments, it will pass through the shell as is, and therefore all shell variable expansions will apply. But for the array type, the values will be shell-escaped.
   */
  args?: ("${command:pickArgs}" | (unknown[] | string)) & string[];
  /**
   * Configures automatic reload of code on edit.
   */
  autoReload?: {
    /**
     * Automatically reload code on edit.
     */
    enable?: boolean;
    /**
     * Glob patterns of paths to exclude from auto reload.
     */
    exclude?: string[];
    /**
     * Glob patterns of paths to include in auto reload.
     */
    include?: string[];
    [k: string]: unknown;
  };
  /**
   * Where to launch the debug target: internal console, integrated terminal, or external terminal.
   */
  console?: "externalTerminal" | "integratedTerminal" | "internalConsole";
  /**
   * Absolute path to the working directory of the program being debugged. Default is the root directory of the file (leave empty).
   */
  cwd?: string;
  /**
   * Path (fully qualified) to the Python debug adapter executable.
   */
  debugAdapterPath?: string;
  /**
   * Open external browser to launch the application
   */
  autoStartBrowser?: boolean;
  /**
   * Django debugging.
   */
  django?: boolean;
  /**
   * Environment variables defined as a key value pair. Property ends up being the Environment Variable and the value of the property ends up being the value of the Env Variable.
   */
  env?: {
    [k: string]: string;
  };
  /**
   * Absolute path to a file containing environment variable definitions.
   */
  envFile?: string;
  /**
   * Enable debugging of gevent monkey-patched code.
   */
  gevent?: boolean;
  /**
   * Jinja template debugging (e.g. Flask).
   */
  jinja?: false | null | true;
  /**
   * Debug only user-written code.
   */
  justMyCode?: boolean;
  /**
   * Enable logging of debugger events to a log file. This file can be found in the debugpy extension install folder.
   */
  logToFile?: boolean;
  /**
   * Name of the module to be debugged.
   */
  module?: string;
  pathMappings?: PathMappings;
  /**
   * Absolute path to the program.
   */
  program?: string;
  /**
   * Tells extension to use this configuration for test debugging, or when using debug-in-terminal command.
   */
  purpose?: ("debug-test" | "debug-in-terminal")[];
  /**
   * Whether debugging Pyramid applications.
   */
  pyramid?: boolean;
  /**
   * Absolute path to the Python interpreter executable; overrides workspace configuration if set.
   */
  python?: string;
  /**
   * Command-line arguments passed to the Python interpreter. To pass arguments to the debug target, use "args".
   */
  pythonArgs?: string[];
  /**
   * Redirect output.
   */
  redirectOutput?: boolean;
  /**
   * Show return value of functions when stepping.
   */
  showReturnValue?: boolean;
  /**
   * Automatically stop after launch.
   */
  stopOnEntry?: boolean;
  /**
   * Whether to enable Sub Process debugging.
   */
  subProcess?: boolean;
  /**
   * Running debug program under elevated permissions (on Unix).
   */
  sudo?: boolean;
  /**
   * The GUI event loop that's going to run. Possible values: "matplotlib", "wx", "qt", "none", or a custom function that'll be imported and run.
   */
  guiEventLoop?: string;
  /**
   * Display name of the debug console or terminal
   */
  consoleName?: string;
  serverReadyAction?:
    | {
        action?: "openExternally";
        pattern?: string;
        uriFormat?: string;
        killOnServerStop?: boolean;
      }
    | {
        action?: "debugWithChrome" | "debugWithEdge";
        pattern?: string;
        uriFormat?: string;
        webRoot?: string;
        killOnServerStop?: boolean;
      }
    | {
        action?: "startDebugging";
        pattern?: string;
        name: string;
        killOnServerStop?: boolean;
      }
    | {
        action?: "startDebugging";
        pattern?: string;
        config: {
          [k: string]: unknown;
        };
        killOnServerStop?: boolean;
      };
  /**
   * Type of configuration.
   */
  type: "debugpy";
  /**
   * Request type of configuration. Can be "launch" or "attach".
   */
  request: "launch";
  /**
   * Name of configuration; appears in the launch configuration dropdown menu.
   */
  name: string;
  /**
   * For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode
   */
  debugServer?: number;
  /**
   * Task to run before debug session starts.
   */
  preLaunchTask?: string;
  /**
   * Task to run after debug session ends.
   */
  postDebugTask?: string;
  presentation?: Presentation;
  /**
   * Controls when the internal Debug Console should open.
   */
  internalConsoleOptions?:
    | "neverOpen"
    | "openOnSessionStart"
    | "openOnFirstSessionStart";
  /**
   * Disable the warning when trying to start the same debug configuration more than once.
   */
  suppressMultipleSessionWarning?: boolean;
}
export interface DebugpyAttachConfiguration extends DebugConfiguration {
  connect?: AttachByConnectingToDebugpyOverASocket;
  /**
   * Path (fully qualified) to the python debug adapter executable.
   */
  debugAdapterPath?: string;
  /**
   * Django debugging.
   */
  django?: boolean;
  /**
   * Jinja template debugging (e.g. Flask).
   */
  jinja?: false | null | true;
  /**
   * If true, show and debug only user-written code. If false, show and debug all code, including library calls.
   */
  justMyCode?: boolean;
  listen?: AttachByListeningForIncomingSocketConnectionFromDebugpy;
  /**
   * Enable logging of debugger events to a log file. This file can be found in the debugpy extension install folder.
   */
  logToFile?: boolean;
  pathMappings?: PathMappings;
  processId?: "${command:pickProcess}" | number;
  /**
   * Redirect output.
   */
  redirectOutput?: boolean;
  /**
   * Show return value of functions when stepping.
   */
  showReturnValue?: boolean;
  /**
   * Whether to enable Sub Process debugging
   */
  subProcess?: boolean;
  /**
   * Display name of the debug console or terminal
   */
  consoleName?: string;
  /**
   * Type of configuration.
   */
  type: "debugpy";
  /**
   * Request type of configuration. Can be "launch" or "attach".
   */
  request: "attach";
  /**
   * Name of configuration; appears in the launch configuration dropdown menu.
   */
  name: string;
  /**
   * For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode
   */
  debugServer?: number;
  /**
   * Task to run before debug session starts.
   */
  preLaunchTask?: string;
  /**
   * Task to run after debug session ends.
   */
  postDebugTask?: string;
  presentation?: Presentation;
  /**
   * Controls when the internal Debug Console should open.
   */
  internalConsoleOptions?:
    | "neverOpen"
    | "openOnSessionStart"
    | "openOnFirstSessionStart";
  /**
   * Disable the warning when trying to start the same debug configuration more than once.
   */
  suppressMultipleSessionWarning?: boolean;
}

export interface AttachByConnectingToDebugpyOverASocket {
  /**
   * Hostname or IP address to connect to.
   */
  host?: string;
  /**
   * Port to connect to.
   */
  port: number | string;
  [k: string]: unknown;
}
export interface AttachByListeningForIncomingSocketConnectionFromDebugpy {
  /**
   * Hostname or IP address of the interface to listen on.
   */
  host?: string;
  /**
   * Port to listen on.
   */
  port: number | string;
  [k: string]: unknown;
}
export interface PathMapping {
  localRoot: LocalSourceRoot;
  remoteRoot: RemoteSourceRoot;
  [k: string]: unknown;
}
/**
 * Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.
 */
export interface Presentation {
  /**
   * Controls if this configuration should be shown in the configuration dropdown and the command palette.
   */
  hidden?: boolean;
  /**
   * Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette.
   */
  group?: string;
  /**
   * Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette.
   */
  order?: number;
  [k: string]: unknown;
}
