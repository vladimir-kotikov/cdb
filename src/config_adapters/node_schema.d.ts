/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
import { DebugConfiguration } from "vscode";

export interface NodeLaunchConfiguration extends DebugConfiguration {
  /**
   * Command line arguments passed to the program.
   *
   * Can be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.
   */
  args?: string[] | string;
  /**
   * If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.
   */
  attachSimplePort?: number | string;
  /**
   * Attach debugger to new child processes automatically.
   */
  autoAttachChildProcesses?: boolean;
  /**
   * A list of debug sessions which, when this debug session is terminated, will also be stopped.
   */
  cascadeTerminateToConfigurations?: string[];
  /**
   * Where to launch the debug target.
   */
  console?: "internalConsole" | "integratedTerminal" | "externalTerminal";
  /**
   * Customize the textual description the debugger shows for objects (local variables, etc...). Samples:
   *       1. this.toString() // will call toString to print all objects
   *       2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue
   *       3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue
   *
   */
  customDescriptionGenerator?: string;
  /**
   * @deprecated
   * Customize the properties shown for an object in the debugger (local variables, etc...). Samples:
   *     1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects
   *     2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)
   *     3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties
   *
   *     Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181
   */
  customPropertiesGenerator?: string;
  /**
   * Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder
   */
  cwd?: string;
  /**
   * Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.
   */
  enableContentValidation?: boolean;
  enableDWARF?: boolean;
  env?: {
    [k: string]: string | null;
  };
  /**
   * Absolute path to a file containing environment variable definitions.
   */
  envFile?: string;
  /**
   * Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.
   */
  experimentalNetworking?: "auto" | "on" | "off";
  killBehavior?: "forceful" | "polite" | "none";
  /**
   * Path to the local directory containing the program.
   */
  localRoot?: string | null;
  /**
   * Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.
   */
  nodeVersionHint?: number;
  /**
   * If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.
   */
  outFiles?: string[];
  outputCapture?: "console" | "std";
  pauseForSourceMap?: boolean;
  /**
   * If true, will start profiling as soon as the process launches
   */
  profileStartup?: boolean;
  /**
   * Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.
   */
  program?: string;
  /**
   * Absolute path to the remote directory containing the program.
   */
  remoteRoot?: string | null;
  /**
   * A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with "!" to exclude them. May be set to an empty array or null to avoid restriction.
   */
  resolveSourceMapLocations?: string[] | null;
  /**
   * Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.
   */
  restart?:
    | boolean
    | {
        delay?: number;
        maxAttempts?: number;
        [k: string]: unknown;
      };
  /**
   * Optional arguments passed to the runtime executable.
   */
  runtimeArgs?: string[];
  runtimeExecutable?: string | null;
  runtimeSourcemapPausePatterns?: string[];
  runtimeVersion?: string;
  /**
   * Show the async calls that led to the current call stack.
   */
  showAsyncStacks?:
    | boolean
    | {
        onAttach: number;
        [k: string]: unknown;
      }
    | {
        onceBreakpointResolved: number;
        [k: string]: unknown;
      };
  /**
   * An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `["** /node_modules/**", "!** /node_modules/my-module/**"]`
   */
  skipFiles?: unknown[];
  /**
   * Automatically step through generated code that cannot be mapped back to the original source.
   */
  smartStep?: boolean;
  /**
   * A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.
   */
  sourceMapPathOverrides?: {
    [k: string]: unknown;
  };
  /**
   * Whether to use the "names" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.
   */
  sourceMapRenames?: boolean;
  /**
   * Use JavaScript source maps (if they exist).
   */
  sourceMaps?: boolean;
  /**
   * Automatically stop program after launch.
   */
  stopOnEntry?: boolean | string;
  /**
   * Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.
   */
  timeout?: number;
  /**
   * Timeouts for several debugger operations.
   */
  timeouts?: {
    /**
     * Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.
     */
    hoverEvaluation?: number;
    /**
     * Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted
     */
    sourceMapCumulativePause?: number;
    /**
     * Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed
     */
    sourceMapMinPause?: number;
  };
  /**
   * Configures what diagnostic output is produced.
   */
  trace?:
    | boolean
    | {
        /**
         * Configures where on disk logs are written.
         */
        logFile?: string | null;
        /**
         * Whether to return trace data from the launched application or browser.
         */
        stdio?: boolean;
      };
  serverReadyAction?:
    | {
        action?: "openExternally";
        pattern?: string;
        uriFormat?: string;
        killOnServerStop?: boolean;
      }
    | {
        action?: "debugWithChrome" | "debugWithEdge";
        pattern?: string;
        uriFormat?: string;
        webRoot?: string;
        killOnServerStop?: boolean;
      }
    | {
        action?: "startDebugging";
        pattern?: string;
        name: string;
        killOnServerStop?: boolean;
      }
    | {
        action?: "startDebugging";
        pattern?: string;
        config: {
          [k: string]: unknown;
        };
        killOnServerStop?: boolean;
      };
  /**
   * Type of configuration.
   */
  type: "node";
  /**
   * Request type of configuration. Can be "launch" or "attach".
   */
  request: "launch";
  /**
   * Name of configuration; appears in the launch configuration dropdown menu.
   */
  name: string;
  /**
   * For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode
   */
  debugServer?: number;
  /**
   * Task to run before debug session starts.
   */
  preLaunchTask?: string;
  /**
   * Task to run after debug session ends.
   */
  postDebugTask?: string;
  presentation?: Presentation;
  /**
   * Controls when the internal Debug Console should open.
   */
  internalConsoleOptions?:
    | "neverOpen"
    | "openOnSessionStart"
    | "openOnFirstSessionStart";
  /**
   * Disable the warning when trying to start the same debug configuration more than once.
   */
  suppressMultipleSessionWarning?: boolean;
}
/**
 * Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.
 */
export interface Presentation {
  /**
   * Controls if this configuration should be shown in the configuration dropdown and the command palette.
   */
  hidden?: boolean;
  /**
   * Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette.
   */
  group?: string;
  /**
   * Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette.
   */
  order?: number;
  [k: string]: unknown;
}
